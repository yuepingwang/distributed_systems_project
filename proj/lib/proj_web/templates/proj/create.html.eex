<div>
  <div class="ui-panel">
      <div class="ui-panel-left">
        <h1>MWMR 3D Editor</h1>
        <h4>Logged in as:</h4><h4 id="username"><%= @username %></h4>
      </div>
      <div class="ui-panel-right-1">
        <button class="custom-button" id="saveButton">Save</button>
        <button class="custom-button" id="discardButton">Discard</button>
      </div>
      <div class="ui-panel-right-2">
        <h4>Mode: Create a New Model</h4>
        <div><h5>Resize x: </h5><input class="input-group-field" type="number" name="quantity" value="0"></div>
        <div><h5>Resize y: </h5><input class="input-group-field" type="number" name="quantity" value="0"></div>
        <div><h5>Resize z: </h5><input class="input-group-field" type="number" name="quantity" value="0"></div>
        <div><h5>* Use mouse drag to change model position.</h5></div>
      </div>
  </div>

  <div>
    <script type="text/javascript">
      // turn the phx-elixir pattern-matched username into a js string
      <%# var username = ""+document.getElementById("username").innerHTML;
      document.getElementById("saveButton").onclick = function () {
          location.href = "http://localhost:4000/"+username+"/hi";
      };
      document.getElementById("discardButton").onclick = function () {
          location.href = "http://localhost:4000/"+username;
      }; %>
  </script>
  </div>

  <div class="scene">
    <script type="module">

    import {DragControls} from "https://threejs.org/examples/jsm/controls/DragControls.js";
    import * as THREE from "https://threejs.org/build/three.module.js";
        /* add javascript code */
        let container;
        let camera, scene, renderer;
        let controls, group;
        let enableSelection = false;
        let useredit = "/";
        const username = ""+document.getElementById("username").innerHTML;

        var objects = [];

        var basicMaterial = new THREE.MeshBasicMaterial( { color: 0xffffff, opacity: 1, wireframe: true } );

			const mouse = new THREE.Vector2(), raycaster = new THREE.Raycaster();

        init();


        function init() {
            container = document.createElement( 'div' );
            document.body.appendChild( container );

            camera = new THREE.PerspectiveCamera( 70, window.innerWidth / window.innerHeight, 1, 5000 );
            camera.position.z = 1000;

            scene = new THREE.Scene();
            scene.background = new THREE.Color( 0xf0f0f0 );

            scene.add( new THREE.AmbientLight( 0x505050 ) );

            const light = new THREE.SpotLight( 0xffffff, 1.2 );
            light.position.set( 0, 1000, 1600 );
            light.angle = Math.PI / 9;

            light.castShadow = true;
            light.shadow.camera.near = 1000;
            light.shadow.camera.far = 4000;
            light.shadow.mapSize.width = 1024;
            light.shadow.mapSize.height = 1024;

            scene.add( light );

            group = new THREE.Group();
            scene.add( group );
            
            //first add a base plane (z=0)
            const base_geometry = new THREE.PlaneGeometry( 1000, 1000, 16,16);
            const base_material = new THREE.MeshBasicMaterial( {color: 0xa9a2af, side: THREE.DoubleSide} );
            const base_mesh_material = new THREE.LineBasicMaterial( { color: 0x60607f, linewidth: 10 } );
            const base_plane = new THREE.Mesh( base_geometry, base_material);
            const base_mesh = new THREE.LineSegments( base_geometry, base_mesh_material );

            base_plane.rotation.x = Math.PI / 2;
            base_plane.position.y = -270;
            //base_plane.material.emissive.set( 0x606060 );
            base_plane.receiveShadow = true;
            scene.add( base_plane );

            base_mesh.rotation.x = Math.PI / 2;
            base_mesh.position.y = -270;
            scene.add( base_mesh );

            var geometry = new THREE.BoxBufferGeometry( 50, 50, 50 );

            // LOAD EXISTING MODEL FROM FS //
            for ( let i = 0; i < 0; i ++ ) {
              var material = new THREE.MeshLambertMaterial({color: 0.09*(1.001-i) * 0x2010ff });
              material.needsUpdate = true;
              var object = new THREE.Mesh( geometry, material);

              object.position.x = 0.1*i * 900 - 400;
              object.position.y = 1*(5-Math.abs(i-4.5)) * 60 - 290;
              object.position.z = (1-0.08*i) * 400-100;

              object.rotation.y = 0.6*i * 2 * Math.PI;

              object.scale.x = 0.08*i * 2 + 1.2;
              object.scale.y = (1-0.05*i) * 2 + 1.5;
              object.scale.z = 0.05*i * 2 + 1;

              object.castShadow = true;
              object.receiveShadow = true;
              
              objects.push( object );
            }
            // END OF LOAD EXISTING MODEL FROM FS //
            

            for ( let i = 0; i < objects.length; i ++ ){
              scene.add( objects[i]);
            }

            renderer = new THREE.WebGLRenderer( { antialias: true } );
            renderer.setPixelRatio( window.devicePixelRatio );
            renderer.setSize( window.innerWidth, window.innerHeight );

            renderer.shadowMap.enabled = true;
            renderer.shadowMap.type = THREE.PCFShadowMap;

            container.appendChild( renderer.domElement );
            /* add drag controls */
            addNew();
            <%# controls = new DragControls( [ ... objects ], camera, renderer.domElement );
            controls.addEventListener( 'drag', render );

            controls.addEventListener( 'dragstart', function ( event ) {
              event.object.material.transparent = true;
              event.object.material.opacity = 0.6;
              console.log("xpos:"+event.object.position.x+"; ypos:"+event.object.position.y+"; zpos:"+event.object.position.z);
              console.log("xscale:"+event.object.scale.x+"; yscale:"+event.object.scale.y+"; zscale:"+event.object.scale.z);
            } );
            controls.addEventListener( 'dragend', function ( event ) {
              event.object.material.transparent = false;
              event.object.material.opacity = 1;
              console.log("xpos:"+event.object.position.x+"; ypos:"+event.object.position.y+"; zpos:"+event.object.position.z);
              console.log("xscale:"+event.object.scale.x+"; yscale:"+event.object.scale.y+"; zscale:"+event.object.scale.z);
              } ); %>
            //

            window.addEventListener( 'resize', onWindowResize, false );

            document.addEventListener( 'click', onClick, false );
            window.addEventListener( 'keydown', onKeyDown, false );
            window.addEventListener( 'keyup', onKeyUp, false );
            render();
        }

        function addNew(){
            var geometry = new THREE.BoxBufferGeometry( 500, 500, 500 );
            var material = new THREE.MeshLambertMaterial({color: 0xa0a0f0 });
            material.needsUpdate = true;
            var object = new THREE.Mesh(geometry, material);

            object.position.x = -400;
            object.position.y = -290;
            object.position.z = -100;

            object.castShadow = true;
            object.receiveShadow = true;
            objects.push(object);
            console.log("add");
            scene.add(object);
            //controls = new DragControls( [ ... objects ], camera, renderer.domElement );
            controls = new DragControls( [object], camera, renderer.domElement );
            controls.addEventListener( 'drag', render );

            controls.addEventListener( 'dragstart', function ( event ) {
            event.object.material.transparent = true;
            event.object.material.opacity = 0.5;
            event.object.material.emissive.set(0x707070);
            } );

            controls.addEventListener( 'dragend', function ( event ) {
            event.object.material.transparent = false;
            event.object.material.opacity = 1;
            console.log("xpos:"+event.object.position.x+"; ypos:"+event.object.position.y+"; zpos:"+event.object.position.z);
            console.log("xscale:"+event.object.scale.x+"; yscale:"+event.object.scale.y+"; zscale:"+event.object.scale.z);
            } );
        }

        function onWindowResize() {

            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize( window.innerWidth, window.innerHeight );

            render();
        }

        function onKeyDown( event ) {
            enableSelection = ( event.keyCode === 16 ) ? true : false;
        }

        function onKeyUp() {
            enableSelection = false;
        }

        function onClick( event ) {
            event.preventDefault();
            if ( enableSelection === true ) {
              const draggableObjects = controls.getObjects();
              draggableObjects.length = 0;

              mouse.x = ( event.clientX / window.innerWidth ) * 2 - 1;
              mouse.y = - ( event.clientY / window.innerHeight ) * 2 + 1;

              raycaster.setFromCamera( mouse, camera );
              const intersections = raycaster.intersectObjects( objects, true );

              if ( intersections.length > 0 ) {
                const object = intersections[ 0 ].object;
                object.material = basicMaterial;
                if ( group.children.includes( object ) === true ) {
                  object.material = basicMaterial;
                  scene.attach( object );
                } else {
                  object.material.color.setHex(0xffffff);
                  object.material = basicMaterial;
                  group.attach( object );
                }

                controls.transformGroup = true;
                draggableObjects.push( group );
              }

              if ( group.children.length === 0 ) {
                controls.transformGroup = false;
                draggableObjects.push( ...objects );
              }
            }
            render();
        }

          
        function render() {
            renderer.render( scene, camera );
        }

        function onDocumentMouseMove( event ) {
            mouse.x = ( event.clientX / window.innerWidth ) * 2 - 1;
            mouse.y = - ( event.clientY / window.innerHeight ) * 2 + 1;
            raycaster.setFromCamera( mouse.clone(), camera );   
            render();
        }

          
        // ADD SAVE AND DISCARD EVENTS //
        document.getElementById("saveButton").onclick = function () {
            useredit += JSON.stringify(objects[objects.length-1].toJSON());
            var uri = encodeURI(useredit);
            console.log((uri));
            location.href = "http://localhost:4000/"+username+useredit;
        };
        document.getElementById("discardButton").onclick = function () {
            location.href = "http://localhost:4000/"+username;
        };
        // END OF SAVE AND DISCARD EVENTS //
      </script>
      
  </div>
</div>

